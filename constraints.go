package metadata

type C struct {
}

func (c *C) TableSchema(schema string) {}

func (c *C) TableName(name string) {}

func (c *C) Col(field Field, constraints ...ColumnConstraint) {}

type ColumnConstraint func()

func (c *C) PrimaryKey(b bool) ColumnConstraint { return func() {} }

func (c *C) NotNull(b bool) ColumnConstraint { return func() {} }

func (c *C) Name(name string) ColumnConstraint { return func() {} }

func (c *C) Type(typ string) ColumnConstraint { return func() {} }

func (c *C) Generated(expr string, stored bool) ColumnConstraint { return func() {} }

func (c *C) Default(expr string) ColumnConstraint { return func() {} }

func (c *C) Collate(collation string) ColumnConstraint { return func() {} }

func (c *C) CheckString(name string, expr string) {}

func (c *C) Check(name string, p Predicate) {}

func (c *C) OnUpdateCurrentTimestamp() {}

func (c *C) Index(idxSchema, idxName, idxType string, fields ...Field) {}

func (c *C) UniqueIndex(idxSchema, idxName, idxType string, fields ...Field) {}

type AutoincrementType string

const (
	// TODO: how to deal with the differences between GENERATED {BY DEFAULT | ALWAYS} AS IDENTITY?
	AutoincrementNone            AutoincrementType = ""
	AutoincrementSQLite          AutoincrementType = "AUTOINCREMENT"
	AutoincrementAlwaysIdentity  AutoincrementType = "GENERATED ALWAYS AS IDENTITY"
	AutoincrementDefaultIdentity AutoincrementType = "GENERATED BY DEFAULT AS IDENTITY"
	AutoincrementMySQL           AutoincrementType = "AUTO_INCREMENT"
)

func (c *C) Autoincrement(typ AutoincrementType) ColumnConstraint { return func() {} }

type ReferenceOn func()

type RefOption string

const (
	NoAction   RefOption = "NO ACTION"
	Cascade    RefOption = "CASCADE"
	Restrict   RefOption = "RESTRICT"
	SetNull    RefOption = "SET NULL"
	SetDefault RefOption = "SET DEFAULT"
)

func (c *C) References(table Table, field Field, onActions ...ReferenceOn) ColumnConstraint {
	return func() {}
}

func (c *C) OnUpdate(opt RefOption) ReferenceOn { return func() {} }

func (c *C) OnDelete(opt RefOption) ReferenceOn { return func() {} }
